// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getDocgenCode() should generate code for file with one function 1`] = `
"
try {
  bytesToText.__docgenInfo = {
  \\"displayName\\": \\"bytesToText\\",
  \\"description\\": \\"Convert numeric bytes to a rounded number with label\\",
  \\"props\\": {
    \\"bytes\\": {
      \\"description\\": \\"The number of bytes\\",
      \\"required\\": true,
      \\"type\\": {
        \\"name\\": \\"Number\\"
      }
    },
    \\"precision\\": {
      \\"description\\": \\"The decimal precision or \\\\\\"auto\\\\\\"\\",
      \\"required\\": true,
      \\"type\\": {
        \\"name\\": \\"Number|String\\"
      }
    }
  },
  \\"javadoc\\": {
    \\"name\\": \\"bytesToText\\",
    \\"signature\\": \\"bytesToText(bytes, precision = 'auto') ⇒ {String}\\",
    \\"description\\": \\"Convert numeric bytes to a rounded number with label\\",
    \\"params\\": [
      {
        \\"type\\": \\"Number\\",
        \\"name\\": \\"bytes\\",
        \\"description\\": \\"The number of bytes\\",
        \\"required\\": true,
        \\"properties\\": []
      },
      {
        \\"type\\": \\"Number|String\\",
        \\"name\\": \\"precision\\",
        \\"description\\": \\"The decimal precision or \\\\\\"auto\\\\\\"\\",
        \\"required\\": true,
        \\"properties\\": []
      }
    ],
    \\"returns\\": {
      \\"type\\": \\"String\\",
      \\"description\\": \\"\\",
      \\"properties\\": []
    },
    \\"throws\\": [],
    \\"examples\\": [
      {
        \\"language\\": \\"js\\",
        \\"description\\": \\"\\",
        \\"type\\": \\"javadoc\\",
        \\"text\\": \\"bytesToText(23 * 1024 + 35); // 23.4 KB\\"
      }
    ],
    \\"access\\": \\"public\\",
    \\"chainable\\": null,
    \\"deprecated\\": null,
    \\"version\\": null,
    \\"since\\": null,
    \\"todos\\": [],
    \\"see\\": [],
    \\"customTags\\": [],
    \\"type\\": \\"function\\",
    \\"subtype\\": null,
    \\"ignore\\": false,
    \\"contextCode\\": \\"export default function bytesToText(bytes, precision = 'auto')\\",
    \\"canAddDocgen\\": true
  }
};
} catch (e) {}"
`;

exports[`getDocgenCode() should generate code for file with two functions 1`] = `
"
try {
  random.__docgenInfo = {
  \\"displayName\\": \\"random\\",
  \\"description\\": \\"Return a random integer between min and max inclusive\\",
  \\"props\\": {
    \\"min\\": {
      \\"description\\": \\"The lowest possible integer\\",
      \\"required\\": true,
      \\"type\\": {
        \\"name\\": \\"Number\\"
      }
    },
    \\"max\\": {
      \\"description\\": \\"The highest possible integer\\",
      \\"required\\": true,
      \\"type\\": {
        \\"name\\": \\"Number\\"
      }
    }
  },
  \\"javadoc\\": {
    \\"name\\": \\"random\\",
    \\"signature\\": \\"random(min, max) ⇒ {Number}\\",
    \\"description\\": \\"Return a random integer between min and max inclusive\\",
    \\"params\\": [
      {
        \\"type\\": \\"Number\\",
        \\"name\\": \\"min\\",
        \\"description\\": \\"The lowest possible integer\\",
        \\"required\\": true,
        \\"properties\\": []
      },
      {
        \\"type\\": \\"Number\\",
        \\"name\\": \\"max\\",
        \\"description\\": \\"The highest possible integer\\",
        \\"required\\": true,
        \\"properties\\": []
      }
    ],
    \\"returns\\": {
      \\"type\\": \\"Number\\",
      \\"description\\": \\"\\",
      \\"properties\\": []
    },
    \\"throws\\": [],
    \\"examples\\": [],
    \\"access\\": \\"public\\",
    \\"chainable\\": null,
    \\"deprecated\\": null,
    \\"version\\": null,
    \\"since\\": null,
    \\"todos\\": [],
    \\"see\\": [],
    \\"customTags\\": [],
    \\"type\\": \\"function\\",
    \\"subtype\\": null,
    \\"ignore\\": false,
    \\"contextCode\\": \\"export default function random(min, max)\\",
    \\"canAddDocgen\\": true
  }
};
} catch (e) {}

try {
  random.float.__docgenInfo = {
  \\"displayName\\": \\"random.float\\",
  \\"description\\": \\"Return a random float between min and max exclusive\\",
  \\"props\\": {
    \\"min\\": {
      \\"description\\": \\"The lowest possible value\\",
      \\"required\\": true,
      \\"type\\": {
        \\"name\\": \\"Number\\"
      }
    },
    \\"max\\": {
      \\"description\\": \\"The highest possible value\\",
      \\"required\\": true,
      \\"type\\": {
        \\"name\\": \\"Number\\"
      }
    }
  },
  \\"javadoc\\": {
    \\"name\\": \\"random.float\\",
    \\"signature\\": \\"random.float(min, max) ⇒ {Number}\\",
    \\"description\\": \\"Return a random float between min and max exclusive\\",
    \\"params\\": [
      {
        \\"type\\": \\"Number\\",
        \\"name\\": \\"min\\",
        \\"description\\": \\"The lowest possible value\\",
        \\"required\\": true,
        \\"properties\\": []
      },
      {
        \\"type\\": \\"Number\\",
        \\"name\\": \\"max\\",
        \\"description\\": \\"The highest possible value\\",
        \\"required\\": true,
        \\"properties\\": []
      }
    ],
    \\"returns\\": {
      \\"type\\": \\"Number\\",
      \\"description\\": \\"\\",
      \\"properties\\": []
    },
    \\"throws\\": [],
    \\"examples\\": [],
    \\"access\\": \\"public\\",
    \\"chainable\\": null,
    \\"deprecated\\": null,
    \\"version\\": null,
    \\"since\\": null,
    \\"todos\\": [],
    \\"see\\": [],
    \\"customTags\\": [],
    \\"type\\": \\"function\\",
    \\"subtype\\": \\"variable\\",
    \\"ignore\\": false,
    \\"contextCode\\": \\"random.float = function (min, max)\\",
    \\"canAddDocgen\\": true
  }
};
} catch (e) {}"
`;
